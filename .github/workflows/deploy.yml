name: Main Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # backend-unit-tests:
  #   uses: ./.github/workflows/backend-unit-tests.yml
  #   secrets: inherit

  # frontend-unit-tests:
  #   uses: ./.github/workflows/frontend-unit-tests.yml
  #   secrets: inherit

  push-backend-image:
    uses: ./.github/workflows/push-to-ecr.yml
    secrets: inherit
    with:
      image-tag: "backend-${{ github.sha }}"
      layer: "app"

  push-frontend-image:
    uses: ./.github/workflows/push-to-ecr.yml
    secrets: inherit
    with:
      image-tag: "frontend-${{ github.sha }}"
      layer: "client"

  push-nginx-image:
    needs:
      - push-backend-image
      - push-frontend-image
    uses: ./.github/workflows/push-to-ecr.yml
    secrets: inherit
    with:
      image-tag: "nginx-${{ github.sha }}"
      layer: "nginx"

  deploy:
    runs-on: ubuntu-latest
    needs: push-nginx-image
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Deploy via SSM Commands
        id: execute_command
        run: |
          command_id=$(aws ssm send-command \
            --instance-ids ${{ secrets.AWS_INSTANCE_ID }} \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=[
              "cd /home/ubuntu",
              "export APP_IMAGE=public.ecr.aws/d0w1o5s2/ubcea/lounge-hub:backend-${{ github.sha }}",
              "export CLIENT_IMAGE=public.ecr.aws/d0w1o5s2/ubcea/lounge-hub:frontend-${{ github.sha }}",
              "export NGINX_IMAGE=public.ecr.aws/d0w1o5s2/ubcea/lounge-hub:nginx-${{ github.sha }}",
              "docker pull $APP_IMAGE",
              "docker pull $CLIENT_IMAGE",
              "docker pull $NGINX_IMAGE",
              "docker-compose down",
              "docker-compose up -d --build",
              "docker image prune -af "
            ]' \
            --comment "Deploying new images" \
            --query "Command.CommandId" \
            --output text)

          echo "command_id=$command_id" >> $GITHUB_OUTPUT

      - name: Check SSM command deployment status
        run: |
          STATUS=$(aws ssm list-command-invocations \
            --command-id ${{ steps.execute_command.outputs.command_id }} \
            --details \
            --query "CommandInvocations[0].Status" \
            --output text)

          if [ "$STATUS" != "Success" ]; then
            echo "Deployment failed with status: $STATUS"
            exit 1
          fi
